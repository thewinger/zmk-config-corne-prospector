/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <24 35>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <27 26>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <28 27>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
        };

        num1 {
            bindings = <&kp N1>;
            key-positions = <1 13>;
            layers = <0 2>;
            require-prior-idle-ms = <50>;
        };

        num2 {
            bindings = <&kp N2>;
            key-positions = <2 14>;
            layers = <0 2>;
            require-prior-idle-ms = <50>;
        };

        num3 {
            bindings = <&kp N3>;
            key-positions = <3 15>;
            layers = <0 2>;
            require-prior-idle-ms = <50>;
        };

        num4 {
            bindings = <&kp N4>;
            key-positions = <4 16>;
            layers = <0 2>;
            require-prior-idle-ms = <50>;
        };

        num5 {
            bindings = <&kp N5>;
            key-positions = <5 17>;
            layers = <0 2>;
            require-prior-idle-ms = <50>;
        };

        num6 {
            bindings = <&kp N6>;
            key-positions = <6 18>;
            layers = <0 2>;
            require-prior-idle-ms = <50>;
        };

        num7 {
            bindings = <&kp N7>;
            key-positions = <7 19>;
            layers = <0 2>;
            require-prior-idle-ms = <50>;
        };

        num8 {
            bindings = <&kp N8>;
            key-positions = <8 20>;
            layers = <0 2>;
            require-prior-idle-ms = <50>;
        };

        num9 {
            bindings = <&kp N9>;
            key-positions = <9 21>;
            layers = <0 2>;
            require-prior-idle-ms = <50>;
        };

        num0 {
            bindings = <&kp N0>;
            key-positions = <10 22>;
            layers = <0 2>;
            require-prior-idle-ms = <50>;
        };

        arw_left {
            bindings = <&kp LEFT>;
            key-positions = <30 31>;
        };

        arw_dwn {
            bindings = <&kp DOWN>;
            key-positions = <31 32>;
        };

        arw_up {
            bindings = <&kp UP>;
            key-positions = <32 33>;
        };

        arw_rght {
            bindings = <&kp RIGHT>;
            key-positions = <33 34>;
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        ntild: ntild {
            compatible = "zmk,behavior-mod-morph";
            label = "NTILD";
            bindings = <&ntil>, <&ntild_cap>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        ntil: uc_ntil {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LS(GRAVE)>, <&macro_tap>, <&kp N>;

            label = "UC_NTIL";
            wait-ms = <0>;
        };

        ntild_cap: uc_ntild_cap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp LS(GRAVE)>,
                <&macro_tap>,
                <&kp N>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "UC_NTILD_CAP";
        };

        dir_dquot: dir_dquot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp SPACE>;
            label = "DIR_DQUOT";
        };

        dir_squot: dir_squot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SPACE>;
            label = "DIR_SQUOT";
        };

        dir_btck: dir_btck {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
            label = "DIR_BTCK";
        };

        dongle_boot: dongle_boot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
            label = "DONGLE_BOOT";
        };

        dir_tilde: dir_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp SPACE>;
            label = "DIR_TILDE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp LS(LA(LCTRL))  &kp Q              &kp W         &kp E                            &kp R            &kp T        &kp Y        &kp U             &kp I             &kp O         &kp P                       &kp LS(LA(LC(M)))
&mt LCTRL ESCAPE   &hml LEFT_SHIFT A  &hml LCTRL S  &hml LEFT_ALT D                  &hml LEFT_GUI F  &kp G        &kp H        &hmr RIGHT_GUI J  &hmr RIGHT_ALT K  &hmr RCTRL L  &hmr RIGHT_SHIFT SEMICOLON  &kp SINGLE_QUOTE
&kp LSHFT          &kp Z              &kp X         &kp C                            &kp V            &kp B        &kp N        &kp M             &kp COMMA         &kp DOT       &kp FSLH                    &kp RIGHT_SHIFT
                                                    &mt LS(LA(LC(LEFT_GUI))) ESCAPE  &lt 2 SPACE      &lt 2 TAB    &lt 3 ENTER  &lt 3 BACKSPACE   &kp DEL
            >;

            label = "QWERTY";
        };

        GAME_QW {
            label = "QWERTY_GAME";
            bindings = <
&kp LEFT_ALT      &kp Q  &kp W  &kp E         &kp R      &kp T        &kp Y      &kp U             &kp I             &kp O         &kp P                       &tog 1
&mt LCTRL ESCAPE  &kp A  &kp S  &kp D         &kp F      &kp G        &kp H      &hmr RIGHT_GUI J  &hmr RIGHT_ALT K  &hmr RCTRL L  &hmr RIGHT_SHIFT SEMICOLON  &kp SINGLE_QUOTE
&kp LSHFT         &kp Z  &kp X  &kp C         &kp V      &kp B        &kp N      &kp M             &kp COMMA         &kp DOT       &kp FSLH                    &kp RIGHT_SHIFT
                                &kp LEFT_GUI  &kp SPACE  &lt 2 TAB    &kp ENTER  &lt 3 BACKSPACE   &kp DEL
            >;
        };

        num_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCLAMATION  &kp AT         &kp HASH      &kp DOLLAR    &kp PERCENT      &kp UP_ARROW  &as N7  &as N8  &as N9  &kp MINUS  &kp KP_DIVIDE
&trans  &kp CARET        &kp AMPERSAND  &kp ASTERISK  &kp LEFT_GUI  &kp PAGE_UP      &kp KP_EQUAL  &as N4  &as N5  &as N6  &kp PLUS   &kp KP_ASTERISK
&trans  &trans           &trans         &kp HOME      &kp END       &kp PAGE_DOWN    &kp DOWN      &as N1  &as N2  &as N3  &kp COMMA  &kp DOT
                                        &trans        &trans        &trans           &trans        &trans  &kp N0
            >;

            label = "NUM";
        };

        symbols_layers {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT                &kp LEFT_BRACE        &kp RIGHT_BRACE        &dir_dquot    &kp LS(LA(LEFT))  &kp LS(LG(LEFT_ARROW))  &kp LS(LG(RIGHT))  &kp LS(LA(RIGHT))  &trans             &kp C_PLAY_PAUSE
&trans  &kp BACKSLASH    &kp LA(LS(NUMBER_2))  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &dir_squot    &kp LEFT          &kp DOWN                &kp UP             &kp RIGHT          &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&trans  &kp AMPERSAND    &dir_tilde            &kp LBKT              &kp RBKT               &dir_btck     &ntild            &kp LS(DOWN)            &kp LS(UP)         &trans             &trans             &trans
                                               &trans                &trans                 &trans        &trans            &trans                  &trans
            >;

            label = "SYM";
        };

        system_layer {
            bindings = <
&bootloader  &dongle_boot  &trans  &trans  &kp LC(LS(LG(N4)))  &trans    &out OUT_USB  &out OUT_BLE  &kp CAPSLOCK  &trans  &dongle_boot  &bootloader
&sys_reset   &trans        &trans  &trans  &trans              &trans    &trans        &trans        &trans        &trans  &trans        &sys_reset
&tog 0       &trans        &trans  &trans  &trans              &trans    &trans        &trans        &trans        &trans  &tog 1        &tog 5
                                   &trans  &trans              &trans    &trans        &trans        &trans
            >;

            label = "SYS";
        };

        GAMING_LAYER {
            bindings = <
&kp M  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N4     &kp N5       &none        &none    &none          &none  &none  &none
&kp Z  &kp TAB       &kp Q         &kp W         &kp E      &kp R        &none        &none    &none          &none  &none  &none
&kp X  &kp LSHIFT    &kp A         &kp S         &kp D      &kp F        &kp B        &none    &none          &none  &none  &tog 5
                                   &kp LCTRL     &kp SPACE  &kp SPACE    &kp LA(TAB)  &kp ESC  &kp RIGHT_GUI
            >;

            label = "GAME";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        SYS {
            if-layers = <2 3>;
            then-layer = <4>;
        };

        SYS_REV {
            if-layers = <3 2>;
            then-layer = <4>;
        };
    };
};
